// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/go-restruct/restruct/internal/expr/token"
)

const (
	NoState    = -1
	NumStates  = 85
	NumSymbols = 88
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '.'
1: '.'
2: '.'
3: '"'
4: '"'
5: '''
6: '''
7: 'f'
8: 'a'
9: 'l'
10: 's'
11: 'e'
12: 't'
13: 'r'
14: 'u'
15: 'e'
16: '('
17: ')'
18: '['
19: ']'
20: '.'
21: '-'
22: '!'
23: '^'
24: '*'
25: '/'
26: '%'
27: '<'
28: '<'
29: '>'
30: '>'
31: '&'
32: '&'
33: '^'
34: '+'
35: '|'
36: '='
37: '='
38: '!'
39: '='
40: '>'
41: '<'
42: '>'
43: '='
44: '<'
45: '='
46: '&'
47: '&'
48: '|'
49: '|'
50: '?'
51: ':'
52: ','
53: '0'
54: '0'
55: 'x'
56: '0'
57: 'X'
58: '_'
59: '_'
60: 'u'
61: 'U'
62: 'l'
63: 'L'
64: 'f'
65: 'F'
66: 'l'
67: 'L'
68: 'e'
69: 'E'
70: '+'
71: '-'
72: '\'
73: '"'
74: '\'
75: '''
76: ' '
77: '\t'
78: '\n'
79: '\r'
80: 'a'-'z'
81: 'A'-'Z'
82: '0'-'9'
83: '0'-'7'
84: '0'-'9'
85: 'a'-'f'
86: 'A'-'F'
87: .
*/
