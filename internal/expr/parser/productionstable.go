// Code generated by gocc; DO NOT EDIT.

package parser

import (
    "github.com/go-restruct/restruct/internal/expr/ast"
    "github.com/go-restruct/restruct/internal/expr/token"
    "github.com/go-restruct/restruct/internal/expr/value"
)

type (
	//TODO: change type and variable names to be consistent with other tables
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Expression	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Expression : TernaryExpression	<<  >>`,
		Id:         "Expression",
		NTType:     1,
		Index:      1,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `IdentifierExpression : ident	<< ast.NewIdentifierExpression(string(X[0].(*token.Token).Lit)), nil >>`,
		Id:         "IdentifierExpression",
		NTType:     2,
		Index:      2,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewIdentifierExpression(string(X[0].(*token.Token).Lit)), nil
		},
	},
	ProdTabEntry{
		String: `PrimaryExpression : integer	<< ast.NewConstantErr(value.ParseInt(string(X[0].(*token.Token).Lit))) >>`,
		Id:         "PrimaryExpression",
		NTType:     3,
		Index:      3,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewConstantErr(value.ParseInt(string(X[0].(*token.Token).Lit)))
		},
	},
	ProdTabEntry{
		String: `PrimaryExpression : float	<< ast.NewConstantErr(value.ParseFloat(string(X[0].(*token.Token).Lit))) >>`,
		Id:         "PrimaryExpression",
		NTType:     3,
		Index:      4,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewConstantErr(value.ParseFloat(string(X[0].(*token.Token).Lit)))
		},
	},
	ProdTabEntry{
		String: `PrimaryExpression : string	<< ast.NewConstantErr(value.ParseStrLiteral(string(X[0].(*token.Token).Lit))) >>`,
		Id:         "PrimaryExpression",
		NTType:     3,
		Index:      5,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewConstantErr(value.ParseStrLiteral(string(X[0].(*token.Token).Lit)))
		},
	},
	ProdTabEntry{
		String: `PrimaryExpression : char	<< ast.NewConstantErr(value.ParseCharLiteral(string(X[0].(*token.Token).Lit))) >>`,
		Id:         "PrimaryExpression",
		NTType:     3,
		Index:      6,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewConstantErr(value.ParseCharLiteral(string(X[0].(*token.Token).Lit)))
		},
	},
	ProdTabEntry{
		String: `PrimaryExpression : IdentifierExpression	<<  >>`,
		Id:         "PrimaryExpression",
		NTType:     3,
		Index:      7,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PrimaryExpression : "false"	<< ast.NewConstant(value.NewBoolean(false)), nil >>`,
		Id:         "PrimaryExpression",
		NTType:     3,
		Index:      8,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewConstant(value.NewBoolean(false)), nil
		},
	},
	ProdTabEntry{
		String: `PrimaryExpression : "true"	<< ast.NewConstant(value.NewBoolean(true)), nil >>`,
		Id:         "PrimaryExpression",
		NTType:     3,
		Index:      9,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewConstant(value.NewBoolean(true)), nil
		},
	},
	ProdTabEntry{
		String: `PrimaryExpression : "(" Expression ")"	<< ast.NewParenExpression(X[1].(ast.Node)), nil >>`,
		Id:         "PrimaryExpression",
		NTType:     3,
		Index:      10,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewParenExpression(X[1].(ast.Node)), nil
		},
	},
	ProdTabEntry{
		String: `PostfixExpression : PrimaryExpression	<<  >>`,
		Id:         "PostfixExpression",
		NTType:     4,
		Index:      11,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PostfixExpression : PostfixExpression "[" Expression "]"	<< ast.NewIndexExpression(X[0].(ast.Node), X[2].(ast.Node)), nil >>`,
		Id:         "PostfixExpression",
		NTType:     4,
		Index:      12,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewIndexExpression(X[0].(ast.Node), X[2].(ast.Node)), nil
		},
	},
	ProdTabEntry{
		String: `PostfixExpression : PostfixExpression "(" ")"	<< ast.NewFunctionCallExpression(X[0].(ast.Node), ast.NewEmptyExpressionList()), nil >>`,
		Id:         "PostfixExpression",
		NTType:     4,
		Index:      13,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewFunctionCallExpression(X[0].(ast.Node), ast.NewEmptyExpressionList()), nil
		},
	},
	ProdTabEntry{
		String: `PostfixExpression : PostfixExpression "(" ExpressionList ")"	<< ast.NewFunctionCallExpression(X[0].(ast.Node), X[2].(ast.ExpressionList)), nil >>`,
		Id:         "PostfixExpression",
		NTType:     4,
		Index:      14,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewFunctionCallExpression(X[0].(ast.Node), X[2].(ast.ExpressionList)), nil
		},
	},
	ProdTabEntry{
		String: `PostfixExpression : PostfixExpression "." IdentifierExpression	<< ast.NewDotExpression(X[0].(ast.Node), X[2].(ast.IdentifierExpression)), nil >>`,
		Id:         "PostfixExpression",
		NTType:     4,
		Index:      15,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewDotExpression(X[0].(ast.Node), X[2].(ast.IdentifierExpression)), nil
		},
	},
	ProdTabEntry{
		String: `UnaryExpression : PostfixExpression	<<  >>`,
		Id:         "UnaryExpression",
		NTType:     5,
		Index:      16,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `UnaryExpression : "-" Expression	<< ast.NewNegateExpression(X[1].(ast.Node)), nil >>`,
		Id:         "UnaryExpression",
		NTType:     5,
		Index:      17,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewNegateExpression(X[1].(ast.Node)), nil
		},
	},
	ProdTabEntry{
		String: `UnaryExpression : "!" Expression	<< ast.NewLogicalNotExpression(X[1].(ast.Node)), nil >>`,
		Id:         "UnaryExpression",
		NTType:     5,
		Index:      18,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewLogicalNotExpression(X[1].(ast.Node)), nil
		},
	},
	ProdTabEntry{
		String: `UnaryExpression : "^" Expression	<< ast.NewBitwiseNotExpression(X[1].(ast.Node)), nil >>`,
		Id:         "UnaryExpression",
		NTType:     5,
		Index:      19,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewBitwiseNotExpression(X[1].(ast.Node)), nil
		},
	},
	ProdTabEntry{
		String: `BinaryExpression5 : UnaryExpression	<<  >>`,
		Id:         "BinaryExpression5",
		NTType:     6,
		Index:      20,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BinaryExpression5 : BinaryExpression5 "*" UnaryExpression	<< ast.NewMultiplyExpression(X[0].(ast.Node), X[2].(ast.Node)), nil >>`,
		Id:         "BinaryExpression5",
		NTType:     6,
		Index:      21,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewMultiplyExpression(X[0].(ast.Node), X[2].(ast.Node)), nil
		},
	},
	ProdTabEntry{
		String: `BinaryExpression5 : BinaryExpression5 "/" UnaryExpression	<< ast.NewDivideExpression(X[0].(ast.Node), X[2].(ast.Node)), nil >>`,
		Id:         "BinaryExpression5",
		NTType:     6,
		Index:      22,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewDivideExpression(X[0].(ast.Node), X[2].(ast.Node)), nil
		},
	},
	ProdTabEntry{
		String: `BinaryExpression5 : BinaryExpression5 "%!"(MISSING) UnaryExpression	<< ast.NewModuloExpression(X[0].(ast.Node), X[2].(ast.Node)), nil >>`,
		Id:         "BinaryExpression5",
		NTType:     6,
		Index:      23,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewModuloExpression(X[0].(ast.Node), X[2].(ast.Node)), nil
		},
	},
	ProdTabEntry{
		String: `BinaryExpression5 : BinaryExpression5 "<<" UnaryExpression	<< ast.NewBitwiseLeftShiftExpression(X[0].(ast.Node), X[2].(ast.Node)), nil >>`,
		Id:         "BinaryExpression5",
		NTType:     6,
		Index:      24,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewBitwiseLeftShiftExpression(X[0].(ast.Node), X[2].(ast.Node)), nil
		},
	},
	ProdTabEntry{
		String: `BinaryExpression5 : BinaryExpression5 ">>" UnaryExpression	<< ast.NewBitwiseRightShiftExpression(X[0].(ast.Node), X[2].(ast.Node)), nil >>`,
		Id:         "BinaryExpression5",
		NTType:     6,
		Index:      25,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewBitwiseRightShiftExpression(X[0].(ast.Node), X[2].(ast.Node)), nil
		},
	},
	ProdTabEntry{
		String: `BinaryExpression5 : BinaryExpression5 "&" UnaryExpression	<< ast.NewBitwiseAndExpression(X[0].(ast.Node), X[2].(ast.Node)), nil >>`,
		Id:         "BinaryExpression5",
		NTType:     6,
		Index:      26,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewBitwiseAndExpression(X[0].(ast.Node), X[2].(ast.Node)), nil
		},
	},
	ProdTabEntry{
		String: `BinaryExpression5 : BinaryExpression5 "&^" UnaryExpression	<< ast.NewBitwiseClearExpression(X[0].(ast.Node), X[2].(ast.Node)), nil >>`,
		Id:         "BinaryExpression5",
		NTType:     6,
		Index:      27,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewBitwiseClearExpression(X[0].(ast.Node), X[2].(ast.Node)), nil
		},
	},
	ProdTabEntry{
		String: `BinaryExpression4 : BinaryExpression5	<<  >>`,
		Id:         "BinaryExpression4",
		NTType:     7,
		Index:      28,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BinaryExpression4 : BinaryExpression4 "+" BinaryExpression5	<< ast.NewAddExpression(X[0].(ast.Node), X[2].(ast.Node)), nil >>`,
		Id:         "BinaryExpression4",
		NTType:     7,
		Index:      29,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewAddExpression(X[0].(ast.Node), X[2].(ast.Node)), nil
		},
	},
	ProdTabEntry{
		String: `BinaryExpression4 : BinaryExpression4 "-" BinaryExpression5	<< ast.NewSubtractExpression(X[0].(ast.Node), X[2].(ast.Node)), nil >>`,
		Id:         "BinaryExpression4",
		NTType:     7,
		Index:      30,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewSubtractExpression(X[0].(ast.Node), X[2].(ast.Node)), nil
		},
	},
	ProdTabEntry{
		String: `BinaryExpression4 : BinaryExpression4 "|" BinaryExpression5	<< ast.NewBitwiseOrExpression(X[0].(ast.Node), X[2].(ast.Node)), nil >>`,
		Id:         "BinaryExpression4",
		NTType:     7,
		Index:      31,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewBitwiseOrExpression(X[0].(ast.Node), X[2].(ast.Node)), nil
		},
	},
	ProdTabEntry{
		String: `BinaryExpression4 : BinaryExpression4 "^" BinaryExpression5	<< ast.NewBitwiseXorExpression(X[0].(ast.Node), X[2].(ast.Node)), nil >>`,
		Id:         "BinaryExpression4",
		NTType:     7,
		Index:      32,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewBitwiseXorExpression(X[0].(ast.Node), X[2].(ast.Node)), nil
		},
	},
	ProdTabEntry{
		String: `BinaryExpression3 : BinaryExpression4	<<  >>`,
		Id:         "BinaryExpression3",
		NTType:     8,
		Index:      33,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BinaryExpression3 : BinaryExpression3 "==" BinaryExpression4	<< ast.NewEqualExpression(X[0].(ast.Node), X[2].(ast.Node)), nil >>`,
		Id:         "BinaryExpression3",
		NTType:     8,
		Index:      34,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewEqualExpression(X[0].(ast.Node), X[2].(ast.Node)), nil
		},
	},
	ProdTabEntry{
		String: `BinaryExpression3 : BinaryExpression3 "!=" BinaryExpression4	<< ast.NewNotEqualExpression(X[0].(ast.Node), X[2].(ast.Node)), nil >>`,
		Id:         "BinaryExpression3",
		NTType:     8,
		Index:      35,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewNotEqualExpression(X[0].(ast.Node), X[2].(ast.Node)), nil
		},
	},
	ProdTabEntry{
		String: `BinaryExpression3 : BinaryExpression3 ">" BinaryExpression4	<< ast.NewGreaterThanExpression(X[0].(ast.Node), X[2].(ast.Node)), nil >>`,
		Id:         "BinaryExpression3",
		NTType:     8,
		Index:      36,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGreaterThanExpression(X[0].(ast.Node), X[2].(ast.Node)), nil
		},
	},
	ProdTabEntry{
		String: `BinaryExpression3 : BinaryExpression3 "<" BinaryExpression4	<< ast.NewLessThanExpression(X[0].(ast.Node), X[2].(ast.Node)), nil >>`,
		Id:         "BinaryExpression3",
		NTType:     8,
		Index:      37,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewLessThanExpression(X[0].(ast.Node), X[2].(ast.Node)), nil
		},
	},
	ProdTabEntry{
		String: `BinaryExpression3 : BinaryExpression3 ">=" BinaryExpression4	<< ast.NewGreaterThanOrEqualExpression(X[0].(ast.Node), X[2].(ast.Node)), nil >>`,
		Id:         "BinaryExpression3",
		NTType:     8,
		Index:      38,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewGreaterThanOrEqualExpression(X[0].(ast.Node), X[2].(ast.Node)), nil
		},
	},
	ProdTabEntry{
		String: `BinaryExpression3 : BinaryExpression3 "<=" BinaryExpression4	<< ast.NewLessThanOrEqualExpression(X[0].(ast.Node), X[2].(ast.Node)), nil >>`,
		Id:         "BinaryExpression3",
		NTType:     8,
		Index:      39,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewLessThanOrEqualExpression(X[0].(ast.Node), X[2].(ast.Node)), nil
		},
	},
	ProdTabEntry{
		String: `BinaryExpression2 : BinaryExpression3	<<  >>`,
		Id:         "BinaryExpression2",
		NTType:     9,
		Index:      40,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BinaryExpression2 : BinaryExpression2 "&&" BinaryExpression3	<< ast.NewLogicalAndExpression(X[0].(ast.Node), X[2].(ast.Node)), nil >>`,
		Id:         "BinaryExpression2",
		NTType:     9,
		Index:      41,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewLogicalAndExpression(X[0].(ast.Node), X[2].(ast.Node)), nil
		},
	},
	ProdTabEntry{
		String: `BinaryExpression1 : BinaryExpression2	<<  >>`,
		Id:         "BinaryExpression1",
		NTType:     10,
		Index:      42,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `BinaryExpression1 : BinaryExpression1 "||" BinaryExpression2	<< ast.NewLogicalOrExpression(X[0].(ast.Node), X[2].(ast.Node)), nil >>`,
		Id:         "BinaryExpression1",
		NTType:     10,
		Index:      43,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewLogicalOrExpression(X[0].(ast.Node), X[2].(ast.Node)), nil
		},
	},
	ProdTabEntry{
		String: `TernaryExpression : BinaryExpression1	<<  >>`,
		Id:         "TernaryExpression",
		NTType:     11,
		Index:      44,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `TernaryExpression : TernaryExpression "?" Expression ":" BinaryExpression1	<< ast.NewConditionalExpression(X[0].(ast.Node), X[2].(ast.Node), X[4].(ast.Node)), nil >>`,
		Id:         "TernaryExpression",
		NTType:     11,
		Index:      45,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewConditionalExpression(X[0].(ast.Node), X[2].(ast.Node), X[4].(ast.Node)), nil
		},
	},
	ProdTabEntry{
		String: `ExpressionList : Expression	<< ast.NewExpressionList(X[0].(ast.Node)), nil >>`,
		Id:         "ExpressionList",
		NTType:     12,
		Index:      46,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.NewExpressionList(X[0].(ast.Node)), nil
		},
	},
	ProdTabEntry{
		String: `ExpressionList : ExpressionList "," Expression	<< ast.AppendExpression(X[0].(ast.ExpressionList), X[2].(ast.Node)), nil >>`,
		Id:         "ExpressionList",
		NTType:     12,
		Index:      47,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib) (Attrib, error) {
			return ast.AppendExpression(X[0].(ast.ExpressionList), X[2].(ast.Node)), nil
		},
	},
}
